{"version":3,"sources":["components/Navbar.js","components/Menu.js","Firebase.js","components/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","Menu","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","plates","toShow","handleBreakfastButton","bind","assertThisInitialized","handleLunchButton","handleDataFood","e","preventDefault","setState","objectSpread","filter","plate","console","log","props","name","_this2","onClick","map","i","key","cost","items","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","db","firestore","Formulario","searchRef","React","createRef","handleChange","current","value","handleData","collection","add","clientName","food","order","then","catch","error","onSubmit","ref","onChange","item","App","_Component","handleFood","inherits","createClass","concat","components_Navbar","components_Menu","components_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b122cea.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Navbar extends Component {\n    render(){\n    return (\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n                <a className=\"navbar-brand\" href=\"#\">Burger Queen</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor01\" aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n            </nav>\n        );\n    }\n}\nexport default Navbar;","import React, { Component } from 'react';\nimport { plates } from '../todo.json'\n\n\n\nclass Menu extends Component {\n  constructor(){\n      super()\n      this.state = {\n          plates,\n          toShow : [],\n      }\n      this.handleBreakfastButton = this.handleBreakfastButton.bind(this);\n      this.handleLunchButton = this.handleLunchButton.bind(this);\n      this.handleDataFood = this.handleDataFood.bind(this);\n  }\n  handleBreakfastButton(e){\n      e.preventDefault();\n      this.setState({\n          ...this.state,\n          toShow: this.state.plates.filter(plate => {\n              return plate.type === \"desayuno\"\n            })\n      })\n}\nhandleLunchButton(e){\n    e.preventDefault();\n    this.setState({\n        ...this.state,\n        toShow: this.state.plates.filter(plate => {\n            return plate.type === \"restodia\"\n        })\n    })  \n}\nhandleDataFood(e){\n    e.preventDefault();\nconsole.log(this.props.name)\n}\n    render() {\n        return(\n            <div className=\"menu\">\n                <button className=\"btn btn-lg btn-warning mt-2\" onClick={this.handleBreakfastButton}>Desayuno</button>\n                <button className=\"btn btn-lg btn-warning ml-2 mt-2\" onClick={this.handleLunchButton}>Almuerzo y Cena</button>\n                    <div className=\"row\">\n                    {this.state.toShow.map((plate, i) => {\n                        return(\n                            <div key={i} className=\"col-md-4\">\n                                <button className=\"btn btn-success btn-lg mt-2\" onClick={()=>{\n                                    const name = plate.name;\n                                    const cost = plate.cost;\n                                    this.props.items(name, cost);\n                                    }}>\n                                            { plate.name } <br/>\n                                            ${plate.cost} \n                                </button>\n                            </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n        );\n    }\n}\nexport default Menu;","import firebase from 'firebase/app';\nimport 'firebase/app';\nimport 'firebase/firestore';\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyCzmJJVcoCMtkbGnz6MClhrn_nteobXLDA\",\n    authDomain: \"burgerqueen-milexys.firebaseapp.com\",\n    databaseURL: \"https://burgerqueen-milexys.firebaseio.com\",\n    projectId: \"burgerqueen-milexys\",\n  });\n\nlet db = firebase.firestore();\n\nexport default db;","import React, { Component } from 'react'\nimport db from '../Firebase.js'\n\nclass Formulario extends Component {\n    searchRef = React.createRef();\nconstructor(){\n    super();\n    this.state = {\n        name: \"\",\n    }\n    this.handleData = this.handleData.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n}\n    handleChange = (e) => {\n        e.preventDefault();\n        this.setState({\n            name: this.searchRef.current.value\n        })\n    }\n    handleData = (e) => {\n        e.preventDefault();\n        this.setState({\n            name: \"\",\n        })\n        db.collection(\"clientes\").add({\n            clientName: this.state.name,\n            food: this.props.order\n        }).then(() => {\n            console.log(\"enviado\");\n        })\n        .catch(() => {\n            console.error(\"error\");\n        });\n    }\n\n    render(){\n        return (\n                <form onSubmit={this.handleData}>\n                    <label>Nombre del Cliente: </label>\n                    <input ref={this.searchRef} type=\"text\" className=\"form-control\" onChange={this.handleChange} />\n                            {this.props.order.map((item, i) => {\n                                return (\n                                    <div key={i} className=\"row\">\n                                        <div className=\"col-md-6\">\n                                            {item.name}\n                                        </div>\n                                        <div className=\"col-md-6\">\n                                            ${item.cost}\n                                        </div>\n                                </div>\n                                )\n                            })}\n                        \n                    \n                    \n                    <input type=\"submit\" className=\"btn btn-info mt-2\" value=\"SUBMIT\" />\n                    \n                </form>\n        )\n    }\n}\nexport default Formulario;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Menu from './components/Menu'\nimport Formulario from './components/Formulario.js'\nimport db from './Firebase.js';\n\n\nexport class App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      items: []\n    }\n    this.handleFood = this.handleFood.bind(this);\n  }\n  \n  handleFood(name, cost){\n  this.setState({\n    ...this.state,\n    items: this.state.items.concat([{name: name, cost: cost}])\n  })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <Navbar />\n        </header>\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <Menu items={this.handleFood}/>\n                </div>\n                <div className=\"col-md-6\">\n                  <div className=\"jumbotron mt-2\">\n                          <Formulario order={this.state.items}/>\n                  </div>\n                </div>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}